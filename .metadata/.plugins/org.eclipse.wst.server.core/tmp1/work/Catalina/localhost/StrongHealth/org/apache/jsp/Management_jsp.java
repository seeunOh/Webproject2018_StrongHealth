/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.91
 * Generated at: 2018-12-16 08:10:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javabean.Member;
import java.util.ArrayList;
import javabean.Access_DB;

public final class Management_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\">\r\n");
      out.write("<!-- 부가적인 테마 -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap-theme.min.css\">\r\n");
      out.write("<!-- 합쳐지고 최소화된 최신 자바스크립트 -->\r\n");
      out.write("<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("body{\r\n");
      out.write("width:1080px;\r\n");
      out.write("heigth:;\r\n");
      out.write("text-align:center;\r\n");
      out.write("}\r\n");
      out.write("#memContent{\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#memContent a{\r\n");
      out.write("text-decoration:none;\r\n");
      out.write("color: black;\r\n");
      out.write("}\r\n");
      out.write("#memContent a:hover{\r\n");
      out.write("text-decoration:underline;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
 
	if(session.getAttribute("authority") == null){
		out.println("<script>");
		out.println("alert('로그인후 이용 할 수 있습니다.')");
		out.println("location.href='Container.jsp'");
		out.println("</script>");
	}

      out.write("\r\n");
      out.write("<div id=memContent>\r\n");
      out.write("<h2>회원 관리</h2>\r\n");

	request.setCharacterEncoding("EUC-KR");
	Access_DB ac = new Access_DB();
	ArrayList<Member> ml = new ArrayList<Member>();
	if(session.getAttribute("authority") != null){
		if(session.getAttribute("authority").equals("admin"))
			ml = ac.getMembersAll();
		else{
			Member mb = ac.getMember((String)session.getAttribute("id"));
			ml.add(mb);
		}
	}
	
	int page_number = 0;
	double number_of_article = 20.0;
	int max_article = ml.size();
	int max_page = (int)(Math.ceil(max_article/number_of_article)) - 1;

	if(request.getParameter("page_number") != null) {
		page_number = Integer.parseInt(request.getParameter("page_number"));
	}
	
	String table="<table class=table table-stripted><tr><td>아이디</td><td>패스워드</td><td>이름</td><td>성별</td><td>생년월일</td><td>권한</td><td>주소</td><td>핸드폰번호</td><td>이메일</td><td>비고</td><tr>";
	
	int cnt = 0;
	for(int i=max_article-1-(page_number*(int)number_of_article); i>=0; i--){
		if(cnt == number_of_article)
			break;
		Member mb = ml.get(i);
		table += "<tr><td>" + mb.getId() + "</td><td>" + mb.getPassword() + "</td><td>" + mb.getName() + "</td><td>" + mb.getSex() + "</td><td>" + mb.getBirth() + "</td><td>" + 
		mb.getAuthority() + "</td><td>" + mb.getAddress() + "</td><td>" + mb.getPhone() + "</td><td>" + mb.getEmail() + "</td><td><a href='Container.jsp?selected_page=management_update&id="+ mb.getId() +"'>수정</a></td><tr>";
		cnt++;
	}
	table += "</table>";
	out.println(table);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<p></p>\r\n");

	if(session.getAttribute("authority") != null){
		if(session.getAttribute("authority").equals("admin")){
			out.println("<a href='Container.jsp?selected_page=management&page_number=" + (page_number - 1 == -1 ? 0 : page_number-1) + "'><<이전</a>");
			out.println("<a href='Container.jsp?selected_page=management&page_number=" + (page_number == max_page ? max_page : page_number + 1) + "'>다음>></a>");
		}
	}

      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
